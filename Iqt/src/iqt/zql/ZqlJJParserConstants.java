/* Generated By:JavaCC: Do not edit this line. ZqlJJParserConstants.java */
package br.com.iqt.zql;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ZqlJJParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int K_ALL = 5;
  /** RegularExpression Id. */
  int K_AND = 6;
  /** RegularExpression Id. */
  int K_ANY = 7;
  /** RegularExpression Id. */
  int K_AS = 8;
  /** RegularExpression Id. */
  int K_ASC = 9;
  /** RegularExpression Id. */
  int K_AVG = 10;
  /** RegularExpression Id. */
  int K_BETWEEN = 11;
  /** RegularExpression Id. */
  int K_BINARY_INTEGER = 12;
  /** RegularExpression Id. */
  int K_BOOLEAN = 13;
  /** RegularExpression Id. */
  int K_BY = 14;
  /** RegularExpression Id. */
  int K_CASE = 15;
  /** RegularExpression Id. */
  int K_CHAR = 16;
  /** RegularExpression Id. */
  int K_COMMENT = 17;
  /** RegularExpression Id. */
  int K_COMMIT = 18;
  /** RegularExpression Id. */
  int K_CONNECT = 19;
  /** RegularExpression Id. */
  int K_COUNT = 20;
  /** RegularExpression Id. */
  int K_DATE = 21;
  /** RegularExpression Id. */
  int K_DELETE = 22;
  /** RegularExpression Id. */
  int K_DESC = 23;
  /** RegularExpression Id. */
  int K_DISTINCT = 24;
  /** RegularExpression Id. */
  int K_ELSE = 25;
  /** RegularExpression Id. */
  int K_END = 26;
  /** RegularExpression Id. */
  int K_EXCLUSIVE = 27;
  /** RegularExpression Id. */
  int K_EXISTS = 28;
  /** RegularExpression Id. */
  int K_EXIT = 29;
  /** RegularExpression Id. */
  int K_FLOAT = 30;
  /** RegularExpression Id. */
  int K_FOR = 31;
  /** RegularExpression Id. */
  int K_FROM = 32;
  /** RegularExpression Id. */
  int K_FULL = 33;
  /** RegularExpression Id. */
  int K_GROUP = 34;
  /** RegularExpression Id. */
  int K_HAVING = 35;
  /** RegularExpression Id. */
  int K_IN = 36;
  /** RegularExpression Id. */
  int K_INNER = 37;
  /** RegularExpression Id. */
  int K_INSERT = 38;
  /** RegularExpression Id. */
  int K_INTEGER = 39;
  /** RegularExpression Id. */
  int K_INTERSECT = 40;
  /** RegularExpression Id. */
  int K_INTO = 41;
  /** RegularExpression Id. */
  int K_IS = 42;
  /** RegularExpression Id. */
  int K_JOIN = 43;
  /** RegularExpression Id. */
  int K_LEFT = 44;
  /** RegularExpression Id. */
  int K_LIKE = 45;
  /** RegularExpression Id. */
  int K_LIMIT = 46;
  /** RegularExpression Id. */
  int K_LOCK = 47;
  /** RegularExpression Id. */
  int K_MAX = 48;
  /** RegularExpression Id. */
  int K_MIN = 49;
  /** RegularExpression Id. */
  int K_MINUS = 50;
  /** RegularExpression Id. */
  int K_MODE = 51;
  /** RegularExpression Id. */
  int K_NATURAL = 52;
  /** RegularExpression Id. */
  int K_NOT = 53;
  /** RegularExpression Id. */
  int K_NOWAIT = 54;
  /** RegularExpression Id. */
  int K_NULL = 55;
  /** RegularExpression Id. */
  int K_NUMBER = 56;
  /** RegularExpression Id. */
  int K_OF = 57;
  /** RegularExpression Id. */
  int K_OFFSET = 58;
  /** RegularExpression Id. */
  int K_ON = 59;
  /** RegularExpression Id. */
  int K_ONLY = 60;
  /** RegularExpression Id. */
  int K_OR = 61;
  /** RegularExpression Id. */
  int K_ORDER = 62;
  /** RegularExpression Id. */
  int K_OUTER = 63;
  /** RegularExpression Id. */
  int K_PRIOR = 64;
  /** RegularExpression Id. */
  int K_QUIT = 65;
  /** RegularExpression Id. */
  int K_READ = 66;
  /** RegularExpression Id. */
  int K_REAL = 67;
  /** RegularExpression Id. */
  int K_RIGHT = 68;
  /** RegularExpression Id. */
  int K_ROLLBACK = 69;
  /** RegularExpression Id. */
  int K_ROW = 70;
  /** RegularExpression Id. */
  int K_SELECT = 71;
  /** RegularExpression Id. */
  int K_SET = 72;
  /** RegularExpression Id. */
  int K_SHARE = 73;
  /** RegularExpression Id. */
  int K_SMALLINT = 74;
  /** RegularExpression Id. */
  int K_SOME = 75;
  /** RegularExpression Id. */
  int K_START = 76;
  /** RegularExpression Id. */
  int K_SUM = 77;
  /** RegularExpression Id. */
  int K_TABLE = 78;
  /** RegularExpression Id. */
  int K_TESTE1 = 79;
  /** RegularExpression Id. */
  int K_TRANSACTION = 80;
  /** RegularExpression Id. */
  int K_USING = 81;
  /** RegularExpression Id. */
  int K_UNION = 82;
  /** RegularExpression Id. */
  int K_UPDATE = 83;
  /** RegularExpression Id. */
  int K_VALUES = 84;
  /** RegularExpression Id. */
  int K_VARCHAR2 = 85;
  /** RegularExpression Id. */
  int K_VARCHAR = 86;
  /** RegularExpression Id. */
  int K_WHERE = 87;
  /** RegularExpression Id. */
  int K_WHEN = 88;
  /** RegularExpression Id. */
  int K_WITH = 89;
  /** RegularExpression Id. */
  int K_WORK = 90;
  /** RegularExpression Id. */
  int K_WRITE = 91;
  /** RegularExpression Id. */
  int K_THEN = 92;
  /** RegularExpression Id. */
  int S_NUMBER = 93;
  /** RegularExpression Id. */
  int FLOAT = 94;
  /** RegularExpression Id. */
  int INTEGER = 95;
  /** RegularExpression Id. */
  int DIGIT = 96;
  /** RegularExpression Id. */
  int LINE_COMMENT = 97;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 98;
  /** RegularExpression Id. */
  int S_IDENTIFIER = 99;
  /** RegularExpression Id. */
  int LETTER = 100;
  /** RegularExpression Id. */
  int SPECIAL_CHARS = 101;
  /** RegularExpression Id. */
  int S_BIND = 102;
  /** RegularExpression Id. */
  int S_CHAR_LITERAL = 103;
  /** RegularExpression Id. */
  int S_QUOTED_IDENTIFIER = 104;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"ALL\"",
    "\"AND\"",
    "\"ANY\"",
    "\"AS\"",
    "\"ASC\"",
    "\"AVG\"",
    "\"BETWEEN\"",
    "\"BINARY_INTEGER\"",
    "\"BOOLEAN\"",
    "\"BY\"",
    "\"CASE\"",
    "\"CHAR\"",
    "\"COMMENT\"",
    "\"COMMIT\"",
    "\"CONNECT\"",
    "\"COUNT\"",
    "\"DATE\"",
    "\"DELETE\"",
    "\"DESC\"",
    "\"DISTINCT\"",
    "\"ELSE\"",
    "\"END\"",
    "\"EXCLUSIVE\"",
    "\"EXISTS\"",
    "\"EXIT\"",
    "\"FLOAT\"",
    "\"FOR\"",
    "\"FROM\"",
    "\"FULL\"",
    "\"GROUP\"",
    "\"HAVING\"",
    "\"IN\"",
    "\"INNER\"",
    "\"INSERT\"",
    "\"INTEGER\"",
    "\"INTERSECT\"",
    "\"INTO\"",
    "\"IS\"",
    "\"JOIN\"",
    "\"LEFT\"",
    "\"LIKE\"",
    "\"LIMIT\"",
    "\"LOCK\"",
    "\"MAX\"",
    "\"MIN\"",
    "\"MINUS\"",
    "\"MODE\"",
    "\"NATURAL\"",
    "\"NOT\"",
    "\"NOWAIT\"",
    "\"NULL\"",
    "\"NUMBER\"",
    "\"OF\"",
    "\"OFFSET \"",
    "\"ON\"",
    "\"ONLY\"",
    "\"OR\"",
    "\"ORDER\"",
    "\"OUTER\"",
    "\"PRIOR\"",
    "\"QUIT\"",
    "\"READ\"",
    "\"REAL\"",
    "\"RIGHT\"",
    "\"ROLLBACK\"",
    "\"ROW\"",
    "\"SELECT\"",
    "\"SET\"",
    "\"SHARE\"",
    "\"SMALLINT\"",
    "\"SOME\"",
    "\"START\"",
    "\"SUM\"",
    "\"TABLE\"",
    "\"TESTE1\"",
    "\"TRANSACTION\"",
    "\"USING\"",
    "\"UNION\"",
    "\"UPDATE\"",
    "\"VALUES\"",
    "\"VARCHAR2\"",
    "\"VARCHAR\"",
    "\"WHERE\"",
    "\"WHEN\"",
    "\"WITH\"",
    "\"WORK\"",
    "\"WRITE\"",
    "\"THEN\"",
    "<S_NUMBER>",
    "<FLOAT>",
    "<INTEGER>",
    "<DIGIT>",
    "<LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "<S_IDENTIFIER>",
    "<LETTER>",
    "<SPECIAL_CHARS>",
    "<S_BIND>",
    "<S_CHAR_LITERAL>",
    "<S_QUOTED_IDENTIFIER>",
    "\"(\"",
    "\",\"",
    "\")\"",
    "\";\"",
    "\"=\"",
    "\".\"",
    "\"!=\"",
    "\"#\"",
    "\"<>\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"+\"",
    "\"-\"",
    "\"LEFT OUTER\"",
    "\"RIGHT OUTER\"",
    "\"FULL OUTER\"",
    "\"*\"",
    "\".*\"",
    "\"?\"",
    "\"||\"",
    "\"/\"",
    "\"**\"",
  };

}
