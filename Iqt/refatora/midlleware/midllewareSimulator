/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InteractiveAdvisor2.java
 *
 * Created on 22/09/2011, 16:02:53
 */
package br.com.iqt.midlleware;

import br.com.iqt.AgentRewriter;
import br.com.iqt.Dbms;
import br.com.iqt.HeuristicsSelected;
import java.awt.Dimension;
import java.io.*;
import java.util.ArrayList;
import java.util.Properties;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Arlino
 */
public class midllewareSimulator extends javax.swing.JFrame {
    
    private HeuristicsSelected heuristicsSelect= new HeuristicsSelected();
    private int dbms;
    private String fileInputNamePath, fileOutputNamePath, fileReportNamePath, fileReportName;
    private int totalRewrited, totalNotRewrited, totalError;

    /** Creates new form InteractiveAdvisor2 */
    public midllewareSimulator() {
        initComponents();
        Dimension paneSize = this.getSize();
        Dimension screenSize = this.getToolkit().getScreenSize();
        this.setLocation( (screenSize.width - paneSize.width) / 2, (screenSize.height - paneSize.height) / 2);
        
        this.dbms = Dbms.POSTGRESQL;
        
        labelFileImputName.setText("");
        labelFileOutputName.setText("");
        labelMsgReewrite.setText("");
        labelMsgError.setText("");
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialogRelatorio = new javax.swing.JDialog();
        jScrollPane4 = new javax.swing.JScrollPane();
        textAreaRelatorio = new javax.swing.JTextArea();
        panelNorth = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        panelLoad01 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        labelFileImputName = new javax.swing.JLabel();
        panelLoad02 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        labelFileOutputName = new javax.swing.JLabel();
        panelMsg01 = new javax.swing.JPanel();
        panelMsg02 = new javax.swing.JPanel();
        panelCenter = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        panelCenterRight = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        labelMsgReewrite = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        labelMsgError = new javax.swing.JLabel();
        panelSouth = new javax.swing.JPanel();
        labelMsgTime = new javax.swing.JLabel();

        dialogRelatorio.setMinimumSize(new java.awt.Dimension(600, 300));
        dialogRelatorio.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        textAreaRelatorio.setColumns(20);
        textAreaRelatorio.setRows(5);
        textAreaRelatorio.setMinimumSize(new java.awt.Dimension(164, 94));
        jScrollPane4.setViewportView(textAreaRelatorio);

        dialogRelatorio.getContentPane().add(jScrollPane4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Midlleware Simulator");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(300, 100));
        setName("frameMain"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panelNorth.setPreferredSize(new java.awt.Dimension(600, 99));
        panelNorth.setLayout(new java.awt.GridLayout(3, 2));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Arquivo de Entrada");
        panelNorth.add(jLabel1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Arquivo de Saída");
        panelNorth.add(jLabel2);

        panelLoad01.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jButton1.setText("Abrir Arquivo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel9.add(jButton1);

        labelFileImputName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelFileImputName.setForeground(new java.awt.Color(0, 102, 255));
        labelFileImputName.setText("fileImputName");
        labelFileImputName.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelFileImputName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelFileImputNameMouseClicked(evt);
            }
        });
        jPanel9.add(labelFileImputName);

        panelLoad01.add(jPanel9, java.awt.BorderLayout.PAGE_START);

        panelNorth.add(panelLoad01);

        panelLoad02.setLayout(new java.awt.BorderLayout());

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jButton2.setText("Abrir Arquivo");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel11.add(jButton2);

        labelFileOutputName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelFileOutputName.setForeground(new java.awt.Color(0, 102, 255));
        labelFileOutputName.setText("fileOutputName");
        labelFileOutputName.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelFileOutputName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelFileOutputNameMouseClicked(evt);
            }
        });
        jPanel11.add(labelFileOutputName);

        panelLoad02.add(jPanel11, java.awt.BorderLayout.PAGE_START);

        panelNorth.add(panelLoad02);
        panelNorth.add(panelMsg01);
        panelNorth.add(panelMsg02);

        getContentPane().add(panelNorth, java.awt.BorderLayout.PAGE_START);

        panelCenter.setMinimumSize(new java.awt.Dimension(321, 100));
        panelCenter.setPreferredSize(new java.awt.Dimension(600, 100));
        panelCenter.setLayout(new java.awt.BorderLayout());

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        jButton3.setText("Reescrever");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel10.add(jButton3);

        panelCenter.add(jPanel10, java.awt.BorderLayout.PAGE_START);

        panelCenterRight.setMinimumSize(new java.awt.Dimension(84, 100));
        panelCenterRight.setPreferredSize(new java.awt.Dimension(600, 100));
        panelCenterRight.setLayout(new java.awt.GridLayout(2, 1));

        labelMsgReewrite.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelMsgReewrite.setForeground(new java.awt.Color(51, 153, 0));
        labelMsgReewrite.setText("MsgReewrite");
        jPanel19.add(labelMsgReewrite);

        panelCenterRight.add(jPanel19);

        labelMsgError.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelMsgError.setForeground(new java.awt.Color(255, 0, 0));
        labelMsgError.setText("msgError");
        jPanel1.add(labelMsgError);

        panelCenterRight.add(jPanel1);

        panelCenter.add(panelCenterRight, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelCenter, java.awt.BorderLayout.CENTER);

        panelSouth.setPreferredSize(new java.awt.Dimension(600, 33));

        labelMsgTime.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelMsgTime.setText("jLabel3");
        panelSouth.add(labelMsgTime);

        getContentPane().add(panelSouth, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        if(fileInputNamePath.isEmpty())
            JOptionPane.showMessageDialog(null, "Selecione o arquivo de entrada!", "Erro", JOptionPane.ERROR_MESSAGE);
        else
            if(fileOutputNamePath.isEmpty())
                JOptionPane.showMessageDialog(null, "Informe o arquivo de saída!", "Erro", JOptionPane.ERROR_MESSAGE);
            else{
                
                File f = new File(fileInputNamePath);
                //Verifica se o arquivo realmente existe
                if(!f.exists())
                    JOptionPane.showMessageDialog(null, "O arquivo '" + fileInputNamePath + "' não foi encontrado!", 
                                                    "Erro", JOptionPane.ERROR_MESSAGE);
                else{
                    try{
                        FileWriter out = new FileWriter(fileOutputNamePath,false);
                        BufferedReader in = new BufferedReader(new FileReader(f));
                        String lineIn, lineOut = "";
                        AgentRewriter rw = new AgentRewriter(dbms);
                        this.totalRewrited = 0;
                        this.totalNotRewrited = 0;
                        this.totalError = 0;
                        int i = 0;
                        //Carrega SQLs do arquivo para a lista
                        ArrayList<String> sqlImputList = new ArrayList<String>();
                        while((lineIn = in.readLine())!=null){
                            sqlImputList.add(lineIn);
                        }
                        
                        //Executa a reescerita da lista de sqls e mede o tempo de execução
                        long elapsTime = 0;
                        for (int j = 0; j < sqlImputList.size(); j++) {
                            String sqlIn = sqlImputList.get(j);
                            String sqlOut = "";
                            if(!sqlIn.equals("")){
                                sqlOut = rw.analyseStatement(sqlIn);
                                i++;
                                if(sqlOut != null){
                                    if(rw.isRewrited())
                                        this.totalRewrited++;
                                    else{
                                        sqlOut = sqlIn;
                                        this.totalNotRewrited++;
                                    }
                                }else{
                                    sqlOut = sqlIn;
                                    this.totalError++;
                                }
                                elapsTime += rw.getTimeNano();
                            }
                            lineOut += sqlOut + ";\r\n";
                        }
                        
                        labelMsgTime.setText(Long.toString(elapsTime));
                        
                        out.write(lineOut);
                        in.close();
                        out.close();
                        
                        String message;
                        if(totalRewrited == 0)
                            message = "Não foi feita nenhuma reescria!";
                        else
                            if(totalRewrited == 1)
                                message = "Apenas 01 SQL foi reescrita!";
                            else
                                message = "Foram reescrias " + totalRewrited + " SQLs!";
                        if(totalNotRewrited == 1)
                            message += " Apenas 01 SQL não foi reescrita!";
                        else
                            message += " Não foram reescrias " + totalRewrited + " SQLs!";
                        
                        int total = totalRewrited + totalNotRewrited + totalError;
                        message += " Total de SQLs analizadas: " + total + ".";
                        labelMsgReewrite.setText(message);
                        
                        if(totalError == 0)
                            message = "Nenhuma SQL apresentou erro!";
                        else
                            if(totalError == 1)
                                message = "Uma SQL apresentou erro!";
                            else
                                message = "Foram econtradas " + totalError + " SQLs com erro!";
                        labelMsgError.setText(message);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void labelFileImputNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelFileImputNameMouseClicked
        // TODO add your handling code here:
        ProcessBuilder builder = new ProcessBuilder("notepad.exe",this.fileInputNamePath);
        try {
            Process process = builder.start();
        } catch (IOException e) {
            e.printStackTrace();
        }  
    }//GEN-LAST:event_labelFileImputNameMouseClicked

    private void labelFileOutputNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelFileOutputNameMouseClicked
        // TODO add your handling code here:
        ProcessBuilder builder = new ProcessBuilder("notepad.exe",this.fileOutputNamePath);
        try {
            Process process = builder.start();
        } catch (IOException e) {
            e.printStackTrace();
        }  
    }//GEN-LAST:event_labelFileOutputNameMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        
        // restringe a selecionar apenas arquivos
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        int res = fc.showOpenDialog(null);
        
        if(res == JFileChooser.APPROVE_OPTION){
            File diretorio = fc.getSelectedFile();
            if(diretorio.canRead()){
                labelFileImputName.setText(diretorio.getName());
                fileInputNamePath = diretorio.getAbsolutePath();
            }else
                JOptionPane.showMessageDialog(null, "Erro ao selecionar o arquivo!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        
        // restringe a selecionar apenas arquivos
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        int res = fc.showOpenDialog(null);
        
        if(res == JFileChooser.APPROVE_OPTION){
            File diretorio = fc.getSelectedFile();
            //String[] sqlFile = this.getSqlFile(diretorio.getParent());
            try {
                if(!diretorio.createNewFile() && !diretorio.canWrite())
                    JOptionPane.showMessageDialog(null, "O arquivo não pode ser criado ou modificado!", "Erro", 
                                                        JOptionPane.ERROR_MESSAGE);
                else{
                    if(!fileInputNamePath.equalsIgnoreCase(diretorio.getAbsolutePath())){
                        fileOutputNamePath = diretorio.getAbsolutePath();
                        labelFileOutputName.setText(diretorio.getName());
                    }else
                        JOptionPane.showMessageDialog(null, "O arquivo de entrada deve ser diferente do arquivo de saída!", 
                                                            "Erro", JOptionPane.ERROR_MESSAGE);
                }   
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Diretório inválido!", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private boolean cBSaveReportIsSelected(){
        try {
            File file = new File("stateCBSaveReport.properties");
            FileInputStream fis = new FileInputStream(file);
            
            Properties props = new Properties();
            //lê os dados que estão no arquivo
            props.load(fis);
            fis.close();
            
            //lê proriedades do arquivo
            String state = props.getProperty("state");
            if(state.equalsIgnoreCase("true")){
                fileReportNamePath = props.getProperty("fileReportNamePath");
                fileReportName = props.getProperty("fileReportName");
                return true;
            }
        }
        catch (IOException ex) {
            fileReportNamePath = "report.txt";
            fileReportName = "report.txt";
            return false;
        }
        return false;
    }
    
    private void setCBSaveReport(boolean state){
        try {
            //o arquivo encontra-se no mesmo diretório da aplicação
            File file = new File("stateCBSaveReport.properties");
            FileOutputStream fos = new FileOutputStream(file);
            
            Properties props = new Properties();
            //grava propreidades  no arquivo
            if(state){
                props.setProperty("state", "true");
                props.setProperty("fileReportNamePath", fileReportNamePath); 
                props.setProperty("fileReportName", fileReportName); 
            }else{
                props.setProperty("state", "false");
                props.setProperty("fileReportNamePath", fileReportNamePath); 
                props.setProperty("fileReportName", fileReportName); 
            }
            
            props.store(fos, "Estado do botão Gerar Relatório.");
            fos.close();
        }
        catch (IOException ex) {
            ;
        }
    }

    /*
    private void setDatabaseList(){
        String url =  this.textFieldUrl.getText();
        String user = this.textFieldUser.getText();
        String password = this.textFieldPassword.getText();
        //Obtem a string com a lista de banco de dados do SGBD
        String databaseList = connection.getDatabaseList(url, user, password);
        
        //Lista os bancos de dados no painel
        StringTokenizer st = new StringTokenizer(databaseList, ",");
        panelDatabaseList.setLayout(new GridLayout(st.countTokens()+1, 1));
        Panel panel = new Panel(new FlowLayout(FlowLayout.LEFT));
        panel.add(new Label(connection.getDatabaseName()));
        panelDatabaseList.add(panel);
        String database;
        while(st.hasMoreTokens()){
            database = st.nextToken();
            panel = new Panel(new FlowLayout(FlowLayout.LEFT));
            panel.add(new Label("       " + database));
            panelDatabaseList.add(panel);
        }
        
    }
     * 
     */
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(midllewareSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(midllewareSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(midllewareSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(midllewareSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new midllewareSimulator().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog dialogRelatorio;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel labelFileImputName;
    private javax.swing.JLabel labelFileOutputName;
    private javax.swing.JLabel labelMsgError;
    private javax.swing.JLabel labelMsgReewrite;
    private javax.swing.JLabel labelMsgTime;
    private javax.swing.JPanel panelCenter;
    private javax.swing.JPanel panelCenterRight;
    private javax.swing.JPanel panelLoad01;
    private javax.swing.JPanel panelLoad02;
    private javax.swing.JPanel panelMsg01;
    private javax.swing.JPanel panelMsg02;
    private javax.swing.JPanel panelNorth;
    private javax.swing.JPanel panelSouth;
    private javax.swing.JTextArea textAreaRelatorio;
    // End of variables declaration//GEN-END:variables
}
