package br.com.iqt.advisor;

import br.com.iqt.*;
import br.com.iqt.exception.DbmsException;
import br.com.iqt.exception.NegativeNumberException;
import br.com.iqt.exception.SqlInputException;
import br.com.iqt.util.Convertion;
import br.com.iqt.zql.ParseException;
import java.awt.Dimension;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Arlino
 */
public class InteractiveAdvisorOnline extends javax.swing.JFrame {
    private boolean allSql = false, customSql = false;
    private String path = "";
    private ExecuteAdvisor executeAdvisor;
    
    private final String fileNamePostgresql = "postgresql3.properties";
    private final String fileNameSqlserver = "sqlserver3.properties";
    private final String fileNameOracle = "oracel3.properties";
    private final String fileNameSelectedDatabase = "selectedDatabase3.properties";
    private final String fileNameStateCheckBoxSavePassword = "stateCheckBoxSavePassword3.properties";
    /**
     * Creates new form InteractiveAdvisorOnline
     */
    public InteractiveAdvisorOnline() {
        initComponents();
        
        Dimension paneSize = this.getSize();
        Dimension screenSize = this.getToolkit().getScreenSize();
        this.setLocation( (screenSize.width - paneSize.width) / 2, (screenSize.height - paneSize.height) / 2);
        
        this.checkBoxSavePassword.setSelected(this.getCheckBoxState(fileNameStateCheckBoxSavePassword));
        this.comboBoxBdms.setSelectedIndex(this.getSelectedDatabase());
        this.getDatabaseSettings();
        this.labelDirectory.setText("");
        this.labelNoConnection.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialogDefaultSettings = new javax.swing.JDialog();
        jScrollPane5 = new javax.swing.JScrollPane();
        textAreaDefaultSettings = new javax.swing.JTextArea();
        buttonGroup1 = new javax.swing.ButtonGroup();
        dialogCustomSettings = new javax.swing.JDialog();
        jPanel28 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jPanel29 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jPanel32 = new javax.swing.JPanel();
        jPanel33 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tableCustomHeuristics = new javax.swing.JTable();
        panelTop = new javax.swing.JPanel();
        panelLeft = new javax.swing.JPanel();
        panelRight = new javax.swing.JPanel();
        panelBottom = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        panelChooser = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        labelDirectory = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        panelMain = new javax.swing.JPanel();
        panelInteractive = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        radioSettingsToAllSql = new javax.swing.JRadioButton();
        radioSettingsToAllSqlExceptToCustom = new javax.swing.JRadioButton();
        radioSettingsToCustom = new javax.swing.JRadioButton();
        radioSettingsToNone = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        textTimeInterval = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        panelButtonStart = new javax.swing.JPanel();
        buttonStartAdvisor = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        panelNorthRight = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        comboBoxBdms = new javax.swing.JComboBox();
        jPanel8 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        textFieldServer = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        textFieldDatabase = new javax.swing.JTextField();
        jPanel23 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        textFieldPort = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        textFieldUser = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        textFieldPassword = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        checkBoxSavePassword = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        labelNoConnection = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();

        dialogDefaultSettings.setTitle("Reescritas escolhidas para todas as SQLs");
        dialogDefaultSettings.setMinimumSize(new java.awt.Dimension(400, 300));
        dialogDefaultSettings.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        textAreaDefaultSettings.setBackground(new java.awt.Color(240, 240, 240));
        textAreaDefaultSettings.setColumns(20);
        textAreaDefaultSettings.setEditable(false);
        textAreaDefaultSettings.setRows(5);
        textAreaDefaultSettings.setMinimumSize(new java.awt.Dimension(100, 82));
        textAreaDefaultSettings.setPreferredSize(new java.awt.Dimension(100, 80));
        jScrollPane5.setViewportView(textAreaDefaultSettings);

        dialogDefaultSettings.getContentPane().add(jScrollPane5);

        dialogCustomSettings.setTitle("Reescritas Personalizadas para SQLs");
        dialogCustomSettings.setMinimumSize(new java.awt.Dimension(1000, 430));

        jPanel28.setMinimumSize(new java.awt.Dimension(600, 30));
        jPanel28.setPreferredSize(new java.awt.Dimension(600, 30));
        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jButton2.setText("Excluir");
        jPanel28.add(jButton2);

        dialogCustomSettings.getContentPane().add(jPanel28, java.awt.BorderLayout.PAGE_START);

        jPanel29.setMinimumSize(new java.awt.Dimension(600, 80));
        jPanel29.setPreferredSize(new java.awt.Dimension(600, 80));
        jPanel29.setLayout(new java.awt.GridLayout(5, 3));

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel18.setText("Legenda");
        jPanel29.add(jLabel18);
        jPanel29.add(jPanel32);
        jPanel29.add(jPanel33);

        jLabel19.setText("H1: Eliminar Tabelas Temporárias");
        jPanel29.add(jLabel19);

        jLabel20.setText("H2: Eliminar Having desnecessário");
        jPanel29.add(jLabel20);

        jLabel21.setText("H3: Eliminar Group by e/ou Having desnecessários");
        jPanel29.add(jLabel21);

        jLabel22.setText("H4: Remover Função assossiada a coluna com índice");
        jPanel29.add(jLabel22);

        jLabel23.setText("H5: Trocar conectivo OR por União de seleções");
        jPanel29.add(jLabel23);

        jLabel24.setText("H6: Substituir operação All por sub-consulta");
        jPanel29.add(jLabel24);

        jLabel25.setText("H7: Substituir operação Any por sub-consulta");
        jPanel29.add(jLabel25);

        jLabel26.setText("H8: Substituir operação Some por sub-consulta");
        jPanel29.add(jLabel26);

        jLabel27.setText("H9: Substituir operação In por junção");
        jPanel29.add(jLabel27);

        jLabel28.setText("H10: Remover Expressão Aritmética de coluna com índice");
        jPanel29.add(jLabel28);

        jLabel29.setText("H11: Remover Distinct desnecessário");
        jPanel29.add(jLabel29);

        dialogCustomSettings.getContentPane().add(jPanel29, java.awt.BorderLayout.PAGE_END);

        tableCustomHeuristics.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "SQL", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableCustomHeuristics.setMinimumSize(new java.awt.Dimension(600, 64));
        tableCustomHeuristics.setPreferredSize(new java.awt.Dimension(600, 64));
        jScrollPane7.setViewportView(tableCustomHeuristics);

        dialogCustomSettings.getContentPane().add(jScrollPane7, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Interactive Query Tunning Online");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().add(panelTop, java.awt.BorderLayout.PAGE_START);
        getContentPane().add(panelLeft, java.awt.BorderLayout.LINE_START);
        getContentPane().add(panelRight, java.awt.BorderLayout.LINE_END);

        panelBottom.setLayout(new java.awt.GridLayout(4, 2));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Diretório saída dos arquivos de relatórios com recomendações de Reescrita");
        panelBottom.add(jLabel11);

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel17.setText("Configurações Padrão de Reescrita");
        panelBottom.add(jLabel17);

        panelChooser.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel13.setText("Diretório");
        panelChooser.add(jLabel13);

        jButton1.setText("Abrir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        panelChooser.add(jButton1);

        labelDirectory.setText("labelDirectory");
        panelChooser.add(labelDirectory);

        panelBottom.add(panelChooser);

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 51, 255));
        jLabel16.setText("    Ver Reescrita Padrão Atual");
        jLabel16.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel16MouseClicked(evt);
            }
        });
        panelBottom.add(jLabel16);
        panelBottom.add(jPanel2);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 51, 255));
        jLabel15.setText("    Editar Reescritas Personalizadas");
        jLabel15.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel15MouseClicked(evt);
            }
        });
        panelBottom.add(jLabel15);
        panelBottom.add(jPanel4);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 255));
        jLabel1.setText("Definir Configurações de Reescrita");
        jLabel1.setToolTipText("As definições de reescritas pode ser feitas através do Advisor Offline ou diretamente nos arquivos HeuristicsForAllSql.properties e HeuristicsForSql.properties.");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel3.add(jLabel1);

        panelBottom.add(jPanel3);

        getContentPane().add(panelBottom, java.awt.BorderLayout.PAGE_END);

        panelMain.setLayout(new java.awt.GridLayout(1, 2));

        panelInteractive.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelInteractive.setLayout(new java.awt.GridLayout(8, 0));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setText("Tipo de Reescrita a ser utilizada");
        panelInteractive.add(jLabel14);

        buttonGroup1.add(radioSettingsToAllSql);
        radioSettingsToAllSql.setText("Apenas Reescrita Padrão para todas as SQLs");
        radioSettingsToAllSql.setToolTipText(""); // NOI18N
        radioSettingsToAllSql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioSettingsToAllSqlActionPerformed(evt);
            }
        });
        panelInteractive.add(radioSettingsToAllSql);

        buttonGroup1.add(radioSettingsToAllSqlExceptToCustom);
        radioSettingsToAllSqlExceptToCustom.setText("Utilizar a Reescrita Padrão para todas as SQLs, excetos para as com Reescrita Personalizada");
        radioSettingsToAllSqlExceptToCustom.setToolTipText(""); // NOI18N
        panelInteractive.add(radioSettingsToAllSqlExceptToCustom);

        buttonGroup1.add(radioSettingsToCustom);
        radioSettingsToCustom.setSelected(true);
        radioSettingsToCustom.setText("Utilizar todas as heurísticas para todas as SQLs, excetos para as com Reescrita Personalizada");
        radioSettingsToCustom.setToolTipText(""); // NOI18N
        panelInteractive.add(radioSettingsToCustom);

        buttonGroup1.add(radioSettingsToNone);
        radioSettingsToNone.setText("Utilizar todas as heurísticas para todas as SQLs");
        radioSettingsToNone.setToolTipText(""); // NOI18N
        panelInteractive.add(radioSettingsToNone);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Intervalo de tempo entre as analises de Reescrita");
        panelInteractive.add(jLabel3);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel5.setText("Tempo");
        jPanel7.add(jLabel5);

        textTimeInterval.setColumns(15);
        jPanel7.add(textTimeInterval);

        jLabel7.setText("(em milisegundo)");
        jPanel7.add(jLabel7);

        panelInteractive.add(jPanel7);

        buttonStartAdvisor.setText("Iniciar Advisor");
        buttonStartAdvisor.setToolTipText("Define as heurísticas selecionadas como as que apenas serão utilizadas na reescrita de todas as SQLs.");
        buttonStartAdvisor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartAdvisorActionPerformed(evt);
            }
        });
        panelButtonStart.add(buttonStartAdvisor);

        jCheckBox1.setText("Executar em segundo plano");
        panelButtonStart.add(jCheckBox1);

        panelInteractive.add(panelButtonStart);

        panelMain.add(panelInteractive);

        panelNorthRight.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelNorthRight.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Banco de Dados    ");
        jPanel5.add(jLabel2);

        comboBoxBdms.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PostgreSQL", "SQL Server", "Oracle" }));
        comboBoxBdms.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxBdmsItemStateChanged(evt);
            }
        });
        comboBoxBdms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxBdmsActionPerformed(evt);
            }
        });
        jPanel5.add(comboBoxBdms);

        panelNorthRight.add(jPanel5, java.awt.BorderLayout.PAGE_START);

        jPanel8.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Configurações");
        jPanel11.add(jLabel4);

        jPanel8.add(jPanel11, java.awt.BorderLayout.PAGE_START);

        jPanel12.setLayout(new java.awt.GridLayout(4, 2, 0, 2));

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jLabel10.setText("Servidor               ");
        jPanel22.add(jLabel10);

        textFieldServer.setColumns(15);
        jPanel22.add(textFieldServer);

        jPanel12.add(jPanel22);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jLabel6.setText("Banco de Dados");
        jPanel13.add(jLabel6);

        textFieldDatabase.setColumns(15);
        jPanel13.add(textFieldDatabase);

        jPanel12.add(jPanel13);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jLabel12.setText("Porta                    ");
        jPanel23.add(jLabel12);

        textFieldPort.setColumns(15);
        jPanel23.add(textFieldPort);

        jPanel12.add(jPanel23);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jLabel8.setText("Usuário                ");
        jPanel14.add(jLabel8);

        textFieldUser.setColumns(15);
        jPanel14.add(textFieldUser);

        jPanel12.add(jPanel14);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jLabel9.setText("Senha                  ");
        jPanel15.add(jLabel9);

        textFieldPassword.setColumns(15);
        jPanel15.add(textFieldPassword);

        jPanel12.add(jPanel15);

        checkBoxSavePassword.setText("Salvar senha");
        checkBoxSavePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxSavePasswordActionPerformed(evt);
            }
        });
        jPanel1.add(checkBoxSavePassword);

        jPanel12.add(jPanel1);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        labelNoConnection.setForeground(new java.awt.Color(204, 0, 0));
        labelNoConnection.setText("labelNoConnection");
        jPanel9.add(labelNoConnection);

        jPanel12.add(jPanel9);

        jPanel8.add(jPanel12, java.awt.BorderLayout.CENTER);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
        jPanel8.add(jPanel16, java.awt.BorderLayout.PAGE_END);

        panelNorthRight.add(jPanel8, java.awt.BorderLayout.CENTER);

        jButton4.setText("Testar Conexão");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton4);

        panelNorthRight.add(jPanel6, java.awt.BorderLayout.PAGE_END);

        panelMain.add(panelNorthRight);

        getContentPane().add(panelMain, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel16MouseClicked
StringBuilder text = new StringBuilder("HEURÍSTICAS PADRÃO PARA TODAS AS CONSULTAS\n\n");
        
        HeuristicsSelected heuristicsSelected = AgentRewriter.getHeuristicsForAllSql();
        if(heuristicsSelected == null)
            JOptionPane.showMessageDialog(null, "Não existem configurações definidas!", "Erro", JOptionPane.ERROR_MESSAGE);
        else{
            text.append("\nEliminar Tabelas Temporárias: ").append(Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isTemporaryTableToSubQuerySelected()));
            text.append("\nEliminar Having desnecessário: ").append(Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isHavingToWhereSelected()));
            text.append("\nEliminar Group by e/ou Having desnecessários: ").append(Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isRemoveGroupbySelected()));
            text.append("\nRemover Função assossiada a coluna com índice: ").append(Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isMoveFunctionSelected()));
            text.append("\nTrocar conectivo OR por União de seleções: ").append(Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isOrToUnionSelected()));
            text.append("\nSubstituir operação All por sub-consulta: ").append(Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isAllToSubquerySelected()));
            text.append("\nSubstituir operação Any por sub-consulta: ").append(Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isAnyToSubquerySelected()));
            text.append("\nSubstituir operação Some por sub-consulta: ").append(Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isSomeToSubquerySelected()));
            text.append("\nSubstituir operação In por junção: ").append(Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isInToJoinSelected()));
            text.append("\nRemover Expressão Aritmética de coluna com índice: ").append(Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isMoveAtithmetcExpressionSelected()));
            text.append("\nRemover Distinct desnecessário: ").append(Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isRemoveDistinctSelected()));
            
            textAreaDefaultSettings.setText(text.toString());
            Dimension paneSize = dialogDefaultSettings.getSize();
            Dimension screenSize = dialogDefaultSettings.getToolkit().getScreenSize();
            dialogDefaultSettings.setLocation( (screenSize.width - paneSize.width) / 2, (screenSize.height - paneSize.height) / 2);
            dialogDefaultSettings.setVisible(true);
        }                
    }//GEN-LAST:event_jLabel16MouseClicked

    private void buttonStartAdvisorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartAdvisorActionPerformed
        if(buttonStartAdvisor.getText().endsWith("Iniciar Advisor")){
            int dbmsSelected = this.getDbmsSelected();
            String server = this.textFieldServer.getText();
            String port = textFieldPort.getText();
            String database = textFieldDatabase.getText();
            String user = this.textFieldUser.getText();
            String password = this.textFieldPassword.getText();
            Dbms dbms = new Dbms(dbmsSelected, server, port, database, user, password);
            
            if(radioSettingsToAllSql.isSelected()){
                allSql = true; customSql = false;
            }else
                if(radioSettingsToAllSqlExceptToCustom.isSelected()){
                    allSql = true; customSql = true;
                }else
                    if(radioSettingsToCustom.isSelected()){
                        allSql = false; customSql = true;
                    }else{
                        allSql = false; customSql = false;
                    }
            
            boolean result = ConnectionDbms.testConnection(dbms);
            if(!result){
                labelNoConnection.setText("A conexão como o banco de dados falhou!");
            }else{
                labelNoConnection.setText("");
                long timeInterval;
                
                try{
                    timeInterval = Long.parseLong(this.textTimeInterval.getText());
                }catch(NumberFormatException ex){
                    timeInterval = 5*60*1000;
                    textTimeInterval.setText(Long.toString(timeInterval));
                }
                
                executeAdvisor = new ExecuteAdvisor(dbms, allSql, customSql, timeInterval, path, buttonStartAdvisor);
                executeAdvisor.start();
                buttonStartAdvisor.setText("Para Advisor");
            }
        }else{
            executeAdvisor.suspend();
            buttonStartAdvisor.setText("Iniciar Advisor");
        }
    }//GEN-LAST:event_buttonStartAdvisorActionPerformed

    public class ExecuteAdvisor extends Thread {
        Dbms dbms;
        boolean allSql, customSql;
        JButton button;
        Advisor advisor;
        String path;
        long time;
        
        public ExecuteAdvisor(Dbms dbms, boolean allSql, boolean customSql, long time, String path, JButton button) {
            this.dbms = dbms;
            this.allSql = allSql;
            this.customSql = customSql;
            this.button = button;
            this.time = time;
            this.path = path;
        }
        
        @Override
        public void run() {
            advisor = new Advisor(dbms, allSql, customSql);
            advisor.setPath(path);
            try {
                advisor.start(time);
            } catch (InterruptedException ex) {
                Logger.getLogger(InteractiveAdvisorOnline.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DbmsException ex) {
                Logger.getLogger(InteractiveAdvisorOnline.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(InteractiveAdvisorOnline.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(InteractiveAdvisorOnline.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(InteractiveAdvisorOnline.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SqlInputException ex) {
                Logger.getLogger(InteractiveAdvisorOnline.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(InteractiveAdvisorOnline.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NegativeNumberException ex) {
                Logger.getLogger(InteractiveAdvisorOnline.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(button != null)
                button.setText("Iniciar Advisor");
        }
    }
    
    private void radioSettingsToAllSqlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioSettingsToAllSqlActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioSettingsToAllSqlActionPerformed

    private void jLabel15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel15MouseClicked
        String[] titles = new String [] {
            "SQL", "H1", "H2", "H3", "H4", "H5", "H6", "H7", "H8", "H9", "H10", "H11", 
        };
        Object[][] rows = null;
        
        ArrayList list = AgentRewriter.getHeuristicsForSqlList();
        if(list != null){
            int count = list.size();
            rows = new Object[count][12];
            
            for (int i = 0; i < count; i++) {
                HeuristicsForSql heuristicsForSql = (HeuristicsForSql) list.get(i);
                HeuristicsSelected heuristicsSelected = heuristicsForSql.getHeuristicsSelected();
                rows[i][0] = heuristicsForSql.getSql();
                rows[i][1] = Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isTemporaryTableToSubQuerySelected());
                rows[i][2] = Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isHavingToWhereSelected());
                rows[i][3] = Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isRemoveGroupbySelected());
                rows[i][4] = Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isMoveFunctionSelected());
                rows[i][5] = Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isOrToUnionSelected());
                rows[i][6] = Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isAllToSubquerySelected());
                rows[i][7] = Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isAnyToSubquerySelected());
                rows[i][8] = Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isSomeToSubquerySelected());
                rows[i][9] = Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isInToJoinSelected());
                rows[i][10] = Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isMoveAtithmetcExpressionSelected());
                rows[i][11] = Convertion.trueOrFalseToYesOrNo(heuristicsSelected.isRemoveDistinctSelected());
            }
        }
        
        tableCustomHeuristics.setModel(new DefaultTableModel(rows, titles));
        
        Dimension paneSize = dialogCustomSettings.getSize();
        Dimension screenSize = dialogCustomSettings.getToolkit().getScreenSize();
        dialogCustomSettings.setLocation( (screenSize.width - paneSize.width) / 2, (screenSize.height - paneSize.height) / 2);
        dialogCustomSettings.setVisible(true);
    }//GEN-LAST:event_jLabel15MouseClicked

    private void comboBoxBdmsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxBdmsItemStateChanged
        // TODO add your handling code here:
        this.getDatabaseSettings();
    }//GEN-LAST:event_comboBoxBdmsItemStateChanged

    private void getDatabaseSettings(){
        String fileName = "";
        switch(this.getDbmsSelected()){
            case Dbms.POSTGRESQL:
                fileName = fileNamePostgresql;
                break;
            case Dbms.SQLSERVER:
                fileName = fileNameSqlserver;
                break;
            case Dbms.ORACLE:
                fileName = fileNameOracle;
                break;
        }
        
        try {
            File file = new File(fileName);
            FileInputStream fis = new FileInputStream(file);
            
            Properties props = new Properties();
            //lê os dados que estão no arquivo
            props.load(fis);
            fis.close();
            
            //lê proriedades do arquivo
            String server = props.getProperty("server");
            String port = props.getProperty("port");
            String database = props.getProperty("database");
            String user = props.getProperty("user");
            String password = props.getProperty("password");
            
            this.textFieldServer.setText(server);
            this.textFieldPort.setText(port);
            this.textFieldDatabase.setText(database);
            this.textFieldUser.setText(user);
            this.textFieldPassword.setText(password);
            
        }
        catch (IOException ex) {
            System.out.println("Errro em getSelectedDatabase(): "+ ex.getMessage());;
        }
    }
    
    private int getDbmsSelected(){
        int dbms = comboBoxBdms.getSelectedIndex();
        switch(dbms){
            case 0:
                return Dbms.POSTGRESQL;
            case 1:
                return Dbms.SQLSERVER;
            case 2:
                return Dbms.ORACLE;
        }
        return -1;
    }
    
    private void saveDatabaseSettings(){
        String fileName = "";
        switch(this.getDbmsSelected()){
            case Dbms.POSTGRESQL:
                fileName = fileNamePostgresql;
                break;
            case Dbms.SQLSERVER:
                fileName = fileNameSqlserver;
                break;
            case Dbms.ORACLE:
                fileName = fileNameOracle;
                break;
        }
        
        //o arquivo encontra-se no mesmo diretório da aplicação
        try {
            File file = new File(fileName);
            FileOutputStream fos = new FileOutputStream(file);
            
            String server = this.textFieldServer.getText();
            String port = textFieldPort.getText();
            String database = textFieldDatabase.getText();
            String user = this.textFieldUser.getText();
            String password = this.textFieldPassword.getText();
            boolean isSavedPassword = this.checkBoxSavePassword.isSelected();
            
            Properties props = new Properties();
            //grava propreidades  no arquivo
            props.setProperty("server", server);
            props.setProperty("port", port);
            props.setProperty("database", database);
            props.setProperty("user", user);
            if(isSavedPassword)
                props.setProperty("password", password);
            else
                props.setProperty("password", "");
            
            props.store(fos, "Configurações do BD");
            fos.close();
        }
        catch (IOException ex) {
            System.out.println("Errro em setDatabaseSettings(): "+ ex.getMessage());
        }
    }
    
    private void saveSelectedDatabase(){
        //o arquivo encontra-se no mesmo diretório da aplicação
        int number = comboBoxBdms.getSelectedIndex();
        try {
            File file = new File(fileNameSelectedDatabase);
            FileOutputStream fos = new FileOutputStream(file);
            
            Properties props = new Properties();
            //grava propreidades  no arquivo
            props.setProperty("database", Integer.toString(number));
            
            props.store(fos, "Número do último banco de dados selecionado no checkbox.");
            fos.close();
        }
        catch (IOException ex) {
            System.out.println("Errro em setSelectedDatabase(): "+ ex.getMessage());
        }
    }
    
    private int getSelectedDatabase(){
        try {
            File file = new File(fileNameSelectedDatabase);
            FileInputStream fis = new FileInputStream(file);
            
            Properties props = new Properties();
            //lê os dados que estão no arquivo
            props.load(fis);
            fis.close();
            
            //lê proriedades do arquivo
            String database = props.getProperty("database");
            return  Integer.parseInt(database);
        }
        catch (IOException ex) {
            System.out.println("Errro em getSelectedDatabase(): "+ ex.getMessage());;
            return 0;
        }
    }
    
    private boolean getCheckBoxState(String fileName){
        try {
            File file = new File(fileName);
            FileInputStream fis = new FileInputStream(file);
            
            Properties props = new Properties();
            //lê os dados que estão no arquivo
            props.load(fis);
            fis.close();
            
            //lê proriedades do arquivo
            String state = props.getProperty("state");
            if(state.equalsIgnoreCase("true"))
                return true;
        }
        catch (IOException ex) {
            System.out.println("Errro em getCheckBoxState(): "+ ex.getMessage());
            return false;
        }
        return false;
    }
    
    private void saveCheckBoxState(String fileName, boolean state){
        //o arquivo encontra-se no mesmo diretório da aplicação
        try {
            File file = new File(fileName);
            FileOutputStream fos = new FileOutputStream(file);
            
            Properties props = new Properties();
            //grava propreidades  no arquivo
            props.setProperty("state", Boolean.toString(state));
            
            props.store(fos, "Armazena estado do checkbox.");
            fos.close();
        }
        catch (IOException ex) {
            System.out.println("Errro em saveCheckBoxState(): "+ ex.getMessage());
        }
    }
    
    private void comboBoxBdmsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxBdmsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxBdmsActionPerformed

    private void checkBoxSavePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxSavePasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxSavePasswordActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (textFieldServer.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Digite o endereço do servidor!", "Erro", JOptionPane.ERROR_MESSAGE);
        } else if (textFieldPort.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Digite o número da porta!", "Erro", JOptionPane.ERROR_MESSAGE);
        } else if (textFieldPort.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Digite o nome do usuário!", "Erro", JOptionPane.ERROR_MESSAGE);
        } else {
            int dbmsSelected = this.getDbmsSelected();
            String server = this.textFieldServer.getText();
            String port = textFieldPort.getText();
            String database = textFieldDatabase.getText();
            String user = this.textFieldUser.getText();
            String password = this.textFieldPassword.getText();
            Dbms dbms = new Dbms(dbmsSelected, server, port, database, user, password);
            boolean result = ConnectionDbms.testConnection(dbms);
            if (result) {
                JOptionPane.showMessageDialog(null, "Conexão bem sucedida!", "", JOptionPane.OK_OPTION);
                this.saveDatabaseSettings();
            } else {
                String message = ConnectionDbms.message;
                JOptionPane.showMessageDialog(null, message, "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.saveSelectedDatabase();
        this.saveDatabaseSettings();
        this.saveCheckBoxState(fileNameStateCheckBoxSavePassword, this.checkBoxSavePassword.isSelected());
    }//GEN-LAST:event_formWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fc = new JFileChooser();
        
        // restringe a selecionar apenas arquivos
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        int res = fc.showOpenDialog(null);
        
        if(res == JFileChooser.APPROVE_OPTION){
            File directory = fc.getSelectedFile();
            if(directory.canRead()){
                this.labelDirectory.setText(directory.getAbsolutePath());
                this.path = directory.getAbsolutePath();
            }else
                JOptionPane.showMessageDialog(null, "Erro ao selecionar o diretório!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InteractiveAdvisorOnline.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InteractiveAdvisorOnline.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InteractiveAdvisorOnline.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InteractiveAdvisorOnline.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new InteractiveAdvisorOnline().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonStartAdvisor;
    private javax.swing.JCheckBox checkBoxSavePassword;
    private javax.swing.JComboBox comboBoxBdms;
    private javax.swing.JDialog dialogCustomSettings;
    private javax.swing.JDialog dialogDefaultSettings;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel labelDirectory;
    private javax.swing.JLabel labelNoConnection;
    private javax.swing.JPanel panelBottom;
    private javax.swing.JPanel panelButtonStart;
    private javax.swing.JPanel panelChooser;
    private javax.swing.JPanel panelInteractive;
    private javax.swing.JPanel panelLeft;
    private javax.swing.JPanel panelMain;
    private javax.swing.JPanel panelNorthRight;
    private javax.swing.JPanel panelRight;
    private javax.swing.JPanel panelTop;
    private javax.swing.JRadioButton radioSettingsToAllSql;
    private javax.swing.JRadioButton radioSettingsToAllSqlExceptToCustom;
    private javax.swing.JRadioButton radioSettingsToCustom;
    private javax.swing.JRadioButton radioSettingsToNone;
    private javax.swing.JTable tableCustomHeuristics;
    private javax.swing.JTextArea textAreaDefaultSettings;
    private javax.swing.JTextField textFieldDatabase;
    private javax.swing.JTextField textFieldPassword;
    private javax.swing.JTextField textFieldPort;
    private javax.swing.JTextField textFieldServer;
    private javax.swing.JTextField textFieldUser;
    private javax.swing.JTextField textTimeInterval;
    // End of variables declaration//GEN-END:variables
}
