/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InteractiveAdvisorFromFile.java
 *
 * Created on 22/09/2011, 16:02:53
 */
package br.com.iqt.advisor;

import br.com.iqt.AgentRewriter;
import br.com.iqt.ConnectionDbms;
import br.com.iqt.Dbms;
import br.com.iqt.HeuristicsSelected;
import java.awt.Dimension;
import java.io.*;
import java.util.Properties;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Arlino
 */
public class InteractiveAdvisorFromFile extends javax.swing.JFrame {
    
    private HeuristicsSelected heuristicsSelect= new HeuristicsSelected();
    private String fileInputNamePath, fileOutputNamePath, fileReportNamePath, fileReportName;
    private int totalRewrited, totalNotRewrited, totalError;
    private final String fileNamePostgresql = "postgresql2.properties";
    private final  String fileNameSqlserver = "sqlserver2.properties";
    private final String fileNameOracle = "oracel2.properties";
    private final String fileNameSelectedDatabase = "selectedDatabase2.properties";
    private final String fileNameStateCheckBoxSavePassword = "stateCheckBoxSavePassword2.properties";
    private final String fileNameStateCheckBoxSaveReport = "stateCheckBoxSaveReport.properties";

    /** Creates new form InteractiveAdvisorFromFile */
    public InteractiveAdvisorFromFile() {
        initComponents();
        Dimension paneSize = this.getSize();
        Dimension screenSize = this.getToolkit().getScreenSize();
        this.setLocation( (screenSize.width - paneSize.width) / 2, (screenSize.height - paneSize.height) / 2);
        
        
        this.setCheckBoxsAsSelected();
        
        this.checkBoxSaveReport.setSelected(this.saveCheckBoxSaveReport());
        if(!checkBoxSaveReport.isSelected()){
            buttonChooseDirectory.setEnabled(false);
            labelFileReportName.setText("");
        }
        
        labelFileReportName.setText(fileReportName);
        labelFileImputName.setText("");
        labelFileOutputName.setText("");
        labelMsgReewrite.setText("");
        labelMsgError.setText("");
        labelNoConnection.setText("");
        
        this.checkBoxSavePassword.setSelected(this.getCheckBoxSavePassword());
        this.comboBoxBdms.setSelectedIndex(this.getSelectedDatabase());
        this.getDatabaseSettings();
        
        
        
        fileInputNamePath = "";
        fileOutputNamePath = "";
        fileReportNamePath = "report.txt";
        fileReportName = "report.txt";
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialogRelatorio = new javax.swing.JDialog();
        jScrollPane4 = new javax.swing.JScrollPane();
        textAreaRelatorio = new javax.swing.JTextArea();
        panelNorth = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        panelLoad01 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        labelFileImputName = new javax.swing.JLabel();
        panelLoad02 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        labelFileOutputName = new javax.swing.JLabel();
        panelMsg01 = new javax.swing.JPanel();
        panelMsg02 = new javax.swing.JPanel();
        panelCenter = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        labelMsgReewrite = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        labelMsgError = new javax.swing.JLabel();
        panelCenterRight = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        checkBoxTemporaryTable = new javax.swing.JCheckBox();
        checkBoxHavingToWhere = new javax.swing.JCheckBox();
        checkBoxRemoveGroupby = new javax.swing.JCheckBox();
        checkBoxMoveFunction = new javax.swing.JCheckBox();
        checkBoxOrToUnion = new javax.swing.JCheckBox();
        checkBoxAllToSubquery = new javax.swing.JCheckBox();
        checkBoxAnyToSubquery = new javax.swing.JCheckBox();
        checkBoxSomeToSubquery = new javax.swing.JCheckBox();
        checkBoxInToJoin = new javax.swing.JCheckBox();
        checkBoxMoveAtithmetcExpression = new javax.swing.JCheckBox();
        checkBoxRemoveDistinct = new javax.swing.JCheckBox();
        panelNorthRight = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        comboBoxBdms = new javax.swing.JComboBox();
        jPanel8 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        textFieldServer = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        textFieldDatabase = new javax.swing.JTextField();
        jPanel23 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        textFieldPort = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        textFieldUser = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        textFieldPassword = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        checkBoxSavePassword = new javax.swing.JCheckBox();
        jPanel17 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        checkBoxUseConnection = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        labelNoConnection = new javax.swing.JLabel();
        panelSouth = new javax.swing.JPanel();
        checkBoxSaveReport = new javax.swing.JCheckBox();
        buttonChooseDirectory = new javax.swing.JButton();
        labelFileReportName = new javax.swing.JLabel();

        dialogRelatorio.setMinimumSize(new java.awt.Dimension(600, 300));
        dialogRelatorio.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        textAreaRelatorio.setColumns(20);
        textAreaRelatorio.setRows(5);
        textAreaRelatorio.setMinimumSize(new java.awt.Dimension(164, 94));
        jScrollPane4.setViewportView(textAreaRelatorio);

        dialogRelatorio.getContentPane().add(jScrollPane4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Interactive Query Tunning Offline");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(300, 400));
        setName("frameMain"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panelNorth.setPreferredSize(new java.awt.Dimension(700, 99));
        panelNorth.setLayout(new java.awt.GridLayout(3, 2));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Arquivo de Entrada");
        panelNorth.add(jLabel1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Arquivo de Sa√≠da");
        panelNorth.add(jLabel2);

        panelLoad01.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jButton1.setText("Abrir Arquivo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel9.add(jButton1);

        labelFileImputName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelFileImputName.setForeground(new java.awt.Color(0, 102, 255));
        labelFileImputName.setText("fileImputName");
        labelFileImputName.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelFileImputName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelFileImputNameMouseClicked(evt);
            }
        });
        jPanel9.add(labelFileImputName);

        panelLoad01.add(jPanel9, java.awt.BorderLayout.PAGE_START);

        panelNorth.add(panelLoad01);

        panelLoad02.setLayout(new java.awt.BorderLayout());

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jButton2.setText("Abrir Arquivo");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel11.add(jButton2);

        labelFileOutputName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelFileOutputName.setForeground(new java.awt.Color(0, 102, 255));
        labelFileOutputName.setText("fileOutputName");
        labelFileOutputName.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelFileOutputName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelFileOutputNameMouseClicked(evt);
            }
        });
        jPanel11.add(labelFileOutputName);

        panelLoad02.add(jPanel11, java.awt.BorderLayout.PAGE_START);

        panelNorth.add(panelLoad02);
        panelNorth.add(panelMsg01);
        panelNorth.add(panelMsg02);

        getContentPane().add(panelNorth, java.awt.BorderLayout.PAGE_START);

        panelCenter.setMinimumSize(new java.awt.Dimension(321, 330));
        panelCenter.setPreferredSize(new java.awt.Dimension(700, 350));
        panelCenter.setLayout(new java.awt.BorderLayout());

        jPanel10.setLayout(new java.awt.GridLayout(3, 1));

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        jButton3.setText("Reescrever");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton3);

        jPanel10.add(jPanel5);

        labelMsgReewrite.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelMsgReewrite.setForeground(new java.awt.Color(51, 153, 0));
        labelMsgReewrite.setText("MsgReewrite");
        jPanel19.add(labelMsgReewrite);

        jPanel10.add(jPanel19);

        labelMsgError.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelMsgError.setForeground(new java.awt.Color(255, 0, 0));
        labelMsgError.setText("msgError");
        jPanel1.add(labelMsgError);

        jPanel10.add(jPanel1);

        panelCenter.add(jPanel10, java.awt.BorderLayout.PAGE_START);

        panelCenterRight.setLayout(new java.awt.GridLayout(1, 2));

        jPanel2.setLayout(new java.awt.GridLayout(12, 1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Heur√≠sticas para Reescrita de SQLs");
        jPanel2.add(jLabel7);

        checkBoxTemporaryTable.setText("Eliminar Tabelas Tempor√°rias");
        jPanel2.add(checkBoxTemporaryTable);

        checkBoxHavingToWhere.setText("Eliminar Having desnecess√°rio");
        checkBoxHavingToWhere.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxHavingToWhereActionPerformed(evt);
            }
        });
        jPanel2.add(checkBoxHavingToWhere);

        checkBoxRemoveGroupby.setText("Eliminar Group By");
        checkBoxRemoveGroupby.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxRemoveGroupbyActionPerformed(evt);
            }
        });
        jPanel2.add(checkBoxRemoveGroupby);

        checkBoxMoveFunction.setText("Remover Fun√ß√£o assossiada a coluna com √≠ndice");
        jPanel2.add(checkBoxMoveFunction);

        checkBoxOrToUnion.setText("Trocar conectivo OR por Uni√£o de sele√ß√µes");
        jPanel2.add(checkBoxOrToUnion);

        checkBoxAllToSubquery.setText("Substituir opera√ß√£o All por sub-consulta");
        jPanel2.add(checkBoxAllToSubquery);

        checkBoxAnyToSubquery.setText("Substituir opera√ß√£o Any por sub-consulta");
        jPanel2.add(checkBoxAnyToSubquery);

        checkBoxSomeToSubquery.setText("Substituir opera√ß√£o Some por sub-consulta");
        jPanel2.add(checkBoxSomeToSubquery);

        checkBoxInToJoin.setText("Substituir opera√ß√£o In por jun√ß√£o");
        jPanel2.add(checkBoxInToJoin);

        checkBoxMoveAtithmetcExpression.setText("Remover Express√£o Aritm√©tica de coluna com √≠ndice");
        jPanel2.add(checkBoxMoveAtithmetcExpression);

        checkBoxRemoveDistinct.setText("Remover Distinct desnecess√°rio");
        jPanel2.add(checkBoxRemoveDistinct);

        panelCenterRight.add(jPanel2);

        panelNorthRight.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelNorthRight.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Banco de Dados    ");
        jPanel4.add(jLabel3);

        comboBoxBdms.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PostgreSQL", "SQL Server", "Oracle" }));
        comboBoxBdms.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxBdmsItemStateChanged(evt);
            }
        });
        comboBoxBdms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxBdmsActionPerformed(evt);
            }
        });
        jPanel4.add(comboBoxBdms);

        panelNorthRight.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jPanel8.setLayout(new java.awt.BorderLayout(0, 4));

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Configura√ß√µes");
        jPanel12.add(jLabel4);

        jPanel8.add(jPanel12, java.awt.BorderLayout.PAGE_START);

        jPanel13.setLayout(new java.awt.GridLayout(4, 2, 2, 0));

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jLabel10.setText("Servidor         ");
        jPanel22.add(jLabel10);

        textFieldServer.setColumns(5);
        jPanel22.add(textFieldServer);

        jPanel13.add(jPanel22);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jLabel6.setText("Banco de Dados");
        jPanel14.add(jLabel6);

        textFieldDatabase.setColumns(5);
        jPanel14.add(textFieldDatabase);

        jPanel13.add(jPanel14);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jLabel12.setText("Porta              ");
        jPanel23.add(jLabel12);

        textFieldPort.setColumns(5);
        jPanel23.add(textFieldPort);

        jPanel13.add(jPanel23);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jLabel8.setText("Usu√°rio                ");
        jPanel15.add(jLabel8);

        textFieldUser.setColumns(5);
        jPanel15.add(textFieldUser);

        jPanel13.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jLabel9.setText("Senha            ");
        jPanel16.add(jLabel9);

        textFieldPassword.setColumns(5);
        jPanel16.add(textFieldPassword);

        jPanel13.add(jPanel16);

        checkBoxSavePassword.setText("Salvar senha");
        checkBoxSavePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxSavePasswordActionPerformed(evt);
            }
        });
        jPanel3.add(checkBoxSavePassword);

        jPanel13.add(jPanel3);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        jButton4.setText("Testar Conex√£o");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel17.add(jButton4);

        jPanel13.add(jPanel17);

        jPanel8.add(jPanel13, java.awt.BorderLayout.CENTER);

        checkBoxUseConnection.setSelected(true);
        checkBoxUseConnection.setText("Utilizar heur√≠sticas que fazem conex√£o com banco de dados");
        jPanel7.add(checkBoxUseConnection);

        jPanel8.add(jPanel7, java.awt.BorderLayout.PAGE_END);

        panelNorthRight.add(jPanel8, java.awt.BorderLayout.CENTER);

        labelNoConnection.setForeground(new java.awt.Color(204, 0, 0));
        labelNoConnection.setText("labelNoConnection");
        jPanel6.add(labelNoConnection);

        panelNorthRight.add(jPanel6, java.awt.BorderLayout.PAGE_END);

        panelCenterRight.add(panelNorthRight);

        panelCenter.add(panelCenterRight, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelCenter, java.awt.BorderLayout.CENTER);

        panelSouth.setPreferredSize(new java.awt.Dimension(700, 33));

        checkBoxSaveReport.setText("Gerar arquivo de relat√≥rio de reescritas");
        checkBoxSaveReport.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxSaveReportItemStateChanged(evt);
            }
        });
        checkBoxSaveReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxSaveReportActionPerformed(evt);
            }
        });
        panelSouth.add(checkBoxSaveReport);

        buttonChooseDirectory.setText("Abrir Arquivo");
        buttonChooseDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChooseDirectoryActionPerformed(evt);
            }
        });
        panelSouth.add(buttonChooseDirectory);

        labelFileReportName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelFileReportName.setForeground(new java.awt.Color(0, 102, 255));
        labelFileReportName.setText("fileReportName");
        labelFileReportName.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelFileReportName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelFileReportNameMouseClicked(evt);
            }
        });
        panelSouth.add(labelFileReportName);

        getContentPane().add(panelSouth, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void checkBoxHavingToWhereActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxHavingToWhereActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxHavingToWhereActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        if(fileInputNamePath.isEmpty())
            JOptionPane.showMessageDialog(null, "Selecione o arquivo de entrada!", "Erro", JOptionPane.ERROR_MESSAGE);
        else
            if(fileOutputNamePath.isEmpty())
                JOptionPane.showMessageDialog(null, "Informe o arquivo de sa√≠da!", "Erro", JOptionPane.ERROR_MESSAGE);
            else{
                
                File f = new File(fileInputNamePath);
                //Verifica se o arquivo realmente existe
                if(!f.exists())
                    JOptionPane.showMessageDialog(null, "O arquivo '" + fileInputNamePath + "' n√£o foi encontrado!", 
                                                    "Erro", JOptionPane.ERROR_MESSAGE);
                else{
                    try{
                        FileWriter out = new FileWriter(fileOutputNamePath,false);
                        boolean saveReport = checkBoxSaveReport.isSelected();
                        FileWriter report = null;
                        if(saveReport)
                            report = new FileWriter(fileReportNamePath,false);
                        BufferedReader in = new BufferedReader(new FileReader(f));
                        String lineIn, lineOut, lineReport;
                        AgentRewriter agentRewriter;
                        int dbmsSelected = this.getDbmsSelected();
                        if(checkBoxUseConnection.isSelected()){
                            String server = this.textFieldServer.getText();
                            String port = textFieldPort.getText();
                            String database = textFieldDatabase.getText();
                            String user = this.textFieldUser.getText();
                            String password = this.textFieldPassword.getText();
                            Dbms dbms = new Dbms(dbmsSelected, server, port, database, user, password);
                            boolean result = ConnectionDbms.testConnection(dbms);
                            if(!result){
                                agentRewriter = new AgentRewriter(dbmsSelected);
                                labelNoConnection.setText("A conex√£o como o banco de dados falhou!");
                            }else{
                                agentRewriter = new AgentRewriter(dbms);
                                labelNoConnection.setText("");
                            }
                        }else{
                            agentRewriter = new AgentRewriter(dbmsSelected);
                            labelNoConnection.setText("Sem conex√£o algumas heur√≠sticas n√£o s√£o executadas!");
                        }
                        
                        this.setHeuristicsSelect(heuristicsSelect);
                        this.totalRewrited = 0;
                        this.totalNotRewrited = 0;
                        this.totalError = 0;
                        int i = 0;
                        while((lineIn = in.readLine())!=null){
                            if(!lineIn.equals("")){
                                lineOut = agentRewriter.analyseStatement(lineIn, heuristicsSelect);
                                
                                i++;
                                System.out.println(i + " - " + lineOut);
                                if(agentRewriter.isRewrited()){
                                    lineOut += ";\r\n";
                                    this.totalRewrited++;
                                    lineReport =  "***************************\r\n";
                                    lineReport += "SQL " + i + " foi reescrita\r\n";
                                    lineReport += "***************************\r\n";
                                    lineReport += "SQL Original:\r\n";
                                    lineReport += lineIn + "\r\n";
                                    lineReport += "SQL Reescrita:\r\n";
                                    lineReport += lineOut + "\r\n\r\n";
                                    System.out.println("  reescrita");
                                }else{
                                    if(agentRewriter.isError()){
                                        lineOut = lineIn + ";\r\n";
                                        this.totalError++;
                                        lineReport =  "############################\r\n";
                                        lineReport += "SQL " + i + " cont√©m erro\r\n";
                                        lineReport += "############################\r\n";
                                        lineReport += "SQL com erro:\r\n";
                                        lineReport += lineIn + "\r\n\r\n";
                                        System.out.println("  erro");
                                    }else{
                                        lineOut = lineIn + ";\r\n";
                                        this.totalNotRewrited++;
                                        lineReport =  "-------------------------------\r\n";
                                        lineReport += "SQL " + i + " n√£o foi reescrita\r\n";
                                        lineReport += "-------------------------------\r\n";
                                        lineReport += "SQL Original:\r\n";
                                        lineReport += lineIn + "\r\n\r\n";
                                        System.out.println("  n√£o reescrita");
                                    }
                                }
                                
                                out.write(lineOut);
                                if(saveReport)
                                    report.write(lineReport);
                            }
                        }
                        in.close();
                        out.close();
                        if(saveReport)
                            report.close();
                        
                    } catch (Exception e) {
                        System.out.println("Erro: " + e.getMessage());
                        e.printStackTrace();
                    }
                    
                    String message;
                    if(totalRewrited == 0)
                        message = "N√£o foi feita nenhuma reescria!";
                    else
                        if(totalRewrited == 1)
                            message = "Apenas 01 SQL foi reescrita!";
                        else
                            message = "Foram reescrias " + totalRewrited + " SQLs!";
                    if(totalNotRewrited == 1)
                        message += " Apenas 01 SQL n√£o foi reescrita!";
                    else
                        message += " N√£o foram reescrias " + totalRewrited + " SQLs!";
                    
                    int total = totalRewrited + totalNotRewrited + totalError;
                    message += " Total de SQLs analizadas: " + total + ".";
                    labelMsgReewrite.setText(message);
                    System.out.println(message);
                    if(totalError == 0)
                        message = "Nenhuma SQL apresentou erro!";
                    else
                        if(totalError == 1)
                            message = "Uma SQL apresentou erro!  Verificar arquivo "
                                    + "de relat√≥rio de reescritas para mais detalhes.";
                        else
                            message = "Foram econtradas " + totalError + " SQLs com erro!  "
                                    + "Verificar arquivo de relat√≥rio de reescritas para mais detalhes.";
                    labelMsgError.setText(message);
                    System.out.println(message);
                    
                }
            }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        
        //Salva novo estado do campo checkBox Salvar Relat√≥rio
        this.setCheckBoxSaveReport(this.checkBoxSaveReport.isSelected());
        this.saveSelectedDatabase();
        this.saveDatabaseSettings();
        this.saveCheckBoxSavePassword();
    }//GEN-LAST:event_formWindowClosing

    private void checkBoxRemoveGroupbyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxRemoveGroupbyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxRemoveGroupbyActionPerformed

    private void labelFileImputNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelFileImputNameMouseClicked
        // TODO add your handling code here:
        ProcessBuilder builder = new ProcessBuilder("notepad.exe",this.fileInputNamePath);
        try {
            Process process = builder.start();
        } catch (IOException e) {
            e.printStackTrace();
        }  
    }//GEN-LAST:event_labelFileImputNameMouseClicked

    private void labelFileOutputNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelFileOutputNameMouseClicked
        // TODO add your handling code here:
        ProcessBuilder builder = new ProcessBuilder("notepad.exe",this.fileOutputNamePath);
        try {
            Process process = builder.start();
        } catch (IOException e) {
            e.printStackTrace();
        }  
    }//GEN-LAST:event_labelFileOutputNameMouseClicked

    private void checkBoxSaveReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxSaveReportActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxSaveReportActionPerformed

    private void labelFileReportNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelFileReportNameMouseClicked
        // TODO add your handling code here:
        ProcessBuilder builder = new ProcessBuilder("notepad.exe",this.fileReportNamePath);
        try {
            Process process = builder.start();
        } catch (IOException e) {
            e.printStackTrace();
        }  
    }//GEN-LAST:event_labelFileReportNameMouseClicked

    private void checkBoxSaveReportItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxSaveReportItemStateChanged
        // TODO add your handling code here:
        boolean enabled = checkBoxSaveReport.isSelected();
        //this.setCBSaveReport(enabled);
        this.buttonChooseDirectory.setEnabled(enabled);
        if(enabled)
            this.labelFileReportName.setText(fileReportName);
        else
            this.labelFileReportName.setText("");
    }//GEN-LAST:event_checkBoxSaveReportItemStateChanged

    private void buttonChooseDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChooseDirectoryActionPerformed
        // TODO add your handling code here:
                JFileChooser fc = new JFileChooser();
        
        // restringe a selecionar apenas arquivos
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        int res = fc.showOpenDialog(null);
        
        if(res == JFileChooser.APPROVE_OPTION){
            File diretorio = fc.getSelectedFile();
            //String[] sqlFile = this.getSqlFile(diretorio.getParent());
            try {
                if(!diretorio.createNewFile() && !diretorio.canWrite())
                    JOptionPane.showMessageDialog(null, "O arquivo n√£o pode ser criado ou modificado!");
                else{
                    fileReportNamePath = diretorio.getAbsolutePath();
                    fileReportName = diretorio.getName();
                    labelFileReportName.setText(fileReportName);
                }   
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Diret√≥rio inv√°lido!");
                //Logger.getLogger(InteractiveAdvisorFromFile.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_buttonChooseDirectoryActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        
        // restringe a selecionar apenas arquivos
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        int res = fc.showOpenDialog(null);
        
        if(res == JFileChooser.APPROVE_OPTION){
            File diretorio = fc.getSelectedFile();
            if(diretorio.canRead()){
                labelFileImputName.setText(diretorio.getName());
                fileInputNamePath = diretorio.getAbsolutePath();
            }else
                JOptionPane.showMessageDialog(null, "Erro ao selecionar o arquivo!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        
        // restringe a selecionar apenas arquivos
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        int res = fc.showOpenDialog(null);
        
        if(res == JFileChooser.APPROVE_OPTION){
            File diretorio = fc.getSelectedFile();
            //String[] sqlFile = this.getSqlFile(diretorio.getParent());
            try {
                if(!diretorio.createNewFile() && !diretorio.canWrite())
                    JOptionPane.showMessageDialog(null, "O arquivo n√£o pode ser criado ou modificado!", "Erro", 
                                                        JOptionPane.ERROR_MESSAGE);
                else{
                    if(!fileInputNamePath.equalsIgnoreCase(diretorio.getAbsolutePath())){
                        fileOutputNamePath = diretorio.getAbsolutePath();
                        labelFileOutputName.setText(diretorio.getName());
                    }else
                        JOptionPane.showMessageDialog(null, "O arquivo de entrada deve ser diferente do arquivo de sa√≠da!", 
                                                            "Erro", JOptionPane.ERROR_MESSAGE);
                }   
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Diret√≥rio inv√°lido!", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void comboBoxBdmsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxBdmsItemStateChanged
        this.getDatabaseSettings(); 
        // TODO add your handling code here:         this.getDatabaseSettings();     }//GEN-LAST:event_comboBoxBdmsItemStateChanged
    }
        private void comboBoxBdmsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxBdmsActionPerformed
        }
        // TODO add your handling code here:}//GEN-LAST:event_comboBoxBdmsActionPerformed
        private void checkBoxSavePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxSavePasswordActionPerformed
        }
        // TODO add your handling code here:}//GEN-LAST:event_checkBoxSavePasswordActionPerformed

        private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
            if(textFieldServer.getText().trim().equals(""))
                JOptionPane.showMessageDialog(null, "Digite o endere√ßo do servidor!", "Erro", JOptionPane.ERROR_MESSAGE);
            else
                if(textFieldPort.getText().trim().equals(""))
                    JOptionPane.showMessageDialog(null, "Digite o n√∫mero da porta!", "Erro", JOptionPane.ERROR_MESSAGE);
                else
                    if(textFieldPort.getText().trim().equals(""))
                        JOptionPane.showMessageDialog(null, "Digite o nome do usu√°rio!", "Erro", JOptionPane.ERROR_MESSAGE);
                    else{
                        int dbmsSelected = this.getDbmsSelected();
                        String server = this.textFieldServer.getText();
                        String port = textFieldPort.getText();
                        String database = textFieldDatabase.getText();
                        String user = this.textFieldUser.getText();
                        String password = this.textFieldPassword.getText();
                        Dbms dbms = new Dbms(dbmsSelected, server, port, database, user, password);
                        boolean result = ConnectionDbms.testConnection(dbms);
                        if(result){
                            JOptionPane.showMessageDialog(null, "Conex√£o bem sucedida!", "", JOptionPane.OK_OPTION);
                            this.saveDatabaseSettings();
                        }else{
                            String message = ConnectionDbms.message;
                            JOptionPane.showMessageDialog(null, message, "Erro", JOptionPane.ERROR_MESSAGE);
                        }
                    }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void setCheckBoxsAsSelected(){
        this.checkBoxAllToSubquery.setSelected(true);
        this.checkBoxAnyToSubquery.setSelected(true);
        this.checkBoxHavingToWhere.setSelected(true);
        this.checkBoxInToJoin.setSelected(true);
        this.checkBoxMoveAtithmetcExpression.setSelected(true);
        this.checkBoxMoveFunction.setSelected(true);
        this.checkBoxOrToUnion.setSelected(true);
        this.checkBoxRemoveDistinct.setSelected(true);
        this.checkBoxRemoveGroupby.setSelected(true);
        this.checkBoxSomeToSubquery.setSelected(true);
        this.checkBoxTemporaryTable.setSelected(true);
    }
    
    private void setHeuristicsSelect(HeuristicsSelected heuristicsSelect){
        heuristicsSelect.setAllToSubquerySelected(this.checkBoxAllToSubquery.isSelected());
        heuristicsSelect.setAnyToSubquerySelected(this.checkBoxAnyToSubquery.isSelected());
        heuristicsSelect.setHavingToWhereSelected(this.checkBoxHavingToWhere.isSelected());
        heuristicsSelect.setInToJoinSelected(this.checkBoxInToJoin.isSelected());
        heuristicsSelect.setMoveAtithmetcExpressionSelected(this.checkBoxMoveAtithmetcExpression.isSelected());
        heuristicsSelect.setMoveFunctionSelected(this.checkBoxMoveFunction.isSelected());
        heuristicsSelect.setOrToUnionSelected(this.checkBoxOrToUnion.isSelected());
        heuristicsSelect.setRemoveDistinctSelected(this.checkBoxRemoveDistinct.isSelected());
        heuristicsSelect.setRemoveGroupbySelected(this.checkBoxRemoveGroupby.isSelected());
        heuristicsSelect.setSomeToSubquerySelected(this.checkBoxSomeToSubquery.isSelected());
        heuristicsSelect.setTemporaryTableToSubQuerySelected(this.checkBoxTemporaryTable.isSelected());
    }
    
    private boolean saveCheckBoxSaveReport(){
        try {
            File file = new File(fileNameStateCheckBoxSaveReport);
            FileInputStream fis = new FileInputStream(file);
            
            Properties props = new Properties();
            //l√™ os dados que est√£o no arquivo
            props.load(fis);
            fis.close();
            
            //l√™ proriedades do arquivo
            String state = props.getProperty("state");
            if(state.equalsIgnoreCase("true")){
                fileReportNamePath = props.getProperty("fileReportNamePath");
                fileReportName = props.getProperty("fileReportName");
                return true;
            }
        }
        catch (IOException ex) {
            fileReportNamePath = "report.txt";
            fileReportName = "report.txt";
            return false;
        }
        return false;
    }
    
    private void setCheckBoxSaveReport(boolean state){
        try {
            //o arquivo encontra-se no mesmo diret√≥rio da aplica√ß√£o
            File file = new File(fileNameStateCheckBoxSaveReport);
            FileOutputStream fos = new FileOutputStream(file);
            
            if(fileReportNamePath == null)
                fileReportNamePath = "";
            if(fileReportName == null)
                fileReportName = "";
            
            Properties props = new Properties();
            //grava propreidades  no arquivo
            if(state){
                props.setProperty("state", "true");
                props.setProperty("fileReportNamePath", fileReportNamePath); 
                props.setProperty("fileReportName", fileReportName); 
            }else{
                props.setProperty("state", "false");
                props.setProperty("fileReportNamePath", fileReportNamePath); 
                props.setProperty("fileReportName", fileReportName); 
            }
            
            props.store(fos, "Estado do bot√£o Gerar Relat√≥rio.");
            fos.close();
        }
        catch (IOException ex) {
            ;
        }
    }

    private int getDbmsSelected(){
        int dbms = comboBoxBdms.getSelectedIndex();
        switch(dbms){
            case 0:
                return Dbms.POSTGRESQL;
            case 1:
                return Dbms.SQLSERVER;
            case 2:
                return Dbms.ORACLE;
        }
        return -1;
    }
    
    private boolean getCheckBoxSavePassword(){
        try {
            File file = new File(fileNameStateCheckBoxSavePassword);
            FileInputStream fis = new FileInputStream(file);
            
            Properties props = new Properties();
            //l√™ os dados que est√£o no arquivo
            props.load(fis);
            fis.close();
            
            //l√™ proriedades do arquivo
            String state = props.getProperty("state");
            if(state.equalsIgnoreCase("true"))
                return true;
        }
        catch (IOException ex) {
            System.out.println("Errro em getCBSaveSettings(): "+ ex.getMessage());
            return false;
        }
        return false;
    }
    
    private void saveCheckBoxSavePassword(){
        boolean state = this.checkBoxSavePassword.isSelected();
        //o arquivo encontra-se no mesmo diret√≥rio da aplica√ß√£o
        try {
            File file = new File(fileNameStateCheckBoxSavePassword);
            FileOutputStream fos = new FileOutputStream(file);
            
            Properties props = new Properties();
            //grava propreidades  no arquivo
            if(state)
                props.setProperty("state", "true");
            else
                props.setProperty("state", "false");
            
            props.store(fos, "Estado do bot√£o Salvar sennha em configura√ß√µes.");
            fos.close();
        }
        catch (IOException ex) {
            System.out.println("Errro em setCBSaveSettings(): "+ ex.getMessage());
            ;
        }
    }
    
    private void saveSelectedDatabase(){
        //o arquivo encontra-se no mesmo diret√≥rio da aplica√ß√£o
        int number = comboBoxBdms.getSelectedIndex();
        try {
            File file = new File(fileNameSelectedDatabase);
            FileOutputStream fos = new FileOutputStream(file);
            
            Properties props = new Properties();
            //grava propreidades  no arquivo
            props.setProperty("database", Integer.toString(number));
            
            props.store(fos, "N√∫mero do √∫ltimo banco de dados selecionado no checkbox.");
            fos.close();
        }
        catch (IOException ex) {
            System.out.println("Errro em setSelectedDatabase(): "+ ex.getMessage());
        }
    }
    
    private int getSelectedDatabase(){
        try {
            File file = new File(fileNameSelectedDatabase);
            FileInputStream fis = new FileInputStream(file);
            
            Properties props = new Properties();
            //l√™ os dados que est√£o no arquivo
            props.load(fis);
            fis.close();
            
            //l√™ proriedades do arquivo
            String database = props.getProperty("database");
            return  Integer.parseInt(database);
        }
        catch (IOException ex) {
            System.out.println("Errro em getSelectedDatabase(): "+ ex.getMessage());;
            return 0;
        }
    }
    
    private void saveDatabaseSettings(){
        String fileName = "";
        switch(this.getDbmsSelected()){
            case Dbms.POSTGRESQL:
                fileName = fileNamePostgresql;
                break;
            case Dbms.SQLSERVER:
                fileName = fileNameSqlserver;
                break;
            case Dbms.ORACLE:
                fileName = fileNameOracle;
                break;
        }
        
        //o arquivo encontra-se no mesmo diret√≥rio da aplica√ß√£o
        try {
            File file = new File(fileName);
            FileOutputStream fos = new FileOutputStream(file);
            
            String server = this.textFieldServer.getText();
            String port = textFieldPort.getText();
            String database = textFieldDatabase.getText();
            String user = this.textFieldUser.getText();
            String password = this.textFieldPassword.getText();
            boolean isSavedPassword = this.checkBoxSavePassword.isSelected();
            
            Properties props = new Properties();
            //grava propreidades  no arquivo
            props.setProperty("server", server);
            props.setProperty("port", port);
            props.setProperty("database", database);
            props.setProperty("user", user);
            if(isSavedPassword)
                props.setProperty("password", password);
            else
                props.setProperty("password", "");
            
            props.store(fos, "Configura√ß√µes do BD");
            fos.close();
        }
        catch (IOException ex) {
            System.out.println("Errro em setDatabaseSettings(): "+ ex.getMessage());
        }
    }
    
    private void getDatabaseSettings(){
        String fileName = "";
        switch(this.getDbmsSelected()){
            case Dbms.POSTGRESQL:
                fileName = fileNamePostgresql;
                break;
            case Dbms.SQLSERVER:
                fileName = fileNameSqlserver;
                break;
            case Dbms.ORACLE:
                fileName = fileNameOracle;
                break;
        }
        
        try {
            File file = new File(fileName);
            FileInputStream fis = new FileInputStream(file);
            
            Properties props = new Properties();
            //l√™ os dados que est√£o no arquivo
            props.load(fis);
            fis.close();
            
            //l√™ proriedades do arquivo
            String server = props.getProperty("server");
            String port = props.getProperty("port");
            String database = props.getProperty("database");
            String user = props.getProperty("user");
            String password = props.getProperty("password");
            
            this.textFieldServer.setText(server);
            this.textFieldPort.setText(port);
            this.textFieldDatabase.setText(database);
            this.textFieldUser.setText(user);
            this.textFieldPassword.setText(password);
            
        }
        catch (IOException ex) {
            System.out.println("Errro em getSelectedDatabase(): "+ ex.getMessage());;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InteractiveAdvisorFromFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InteractiveAdvisorFromFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InteractiveAdvisorFromFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InteractiveAdvisorFromFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new InteractiveAdvisorFromFile().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonChooseDirectory;
    private javax.swing.JCheckBox checkBoxAllToSubquery;
    private javax.swing.JCheckBox checkBoxAnyToSubquery;
    private javax.swing.JCheckBox checkBoxHavingToWhere;
    private javax.swing.JCheckBox checkBoxInToJoin;
    private javax.swing.JCheckBox checkBoxMoveAtithmetcExpression;
    private javax.swing.JCheckBox checkBoxMoveFunction;
    private javax.swing.JCheckBox checkBoxOrToUnion;
    private javax.swing.JCheckBox checkBoxRemoveDistinct;
    private javax.swing.JCheckBox checkBoxRemoveGroupby;
    private javax.swing.JCheckBox checkBoxSavePassword;
    private javax.swing.JCheckBox checkBoxSaveReport;
    private javax.swing.JCheckBox checkBoxSomeToSubquery;
    private javax.swing.JCheckBox checkBoxTemporaryTable;
    private javax.swing.JCheckBox checkBoxUseConnection;
    private javax.swing.JComboBox comboBoxBdms;
    private javax.swing.JDialog dialogRelatorio;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel labelFileImputName;
    private javax.swing.JLabel labelFileOutputName;
    private javax.swing.JLabel labelFileReportName;
    private javax.swing.JLabel labelMsgError;
    private javax.swing.JLabel labelMsgReewrite;
    private javax.swing.JLabel labelNoConnection;
    private javax.swing.JPanel panelCenter;
    private javax.swing.JPanel panelCenterRight;
    private javax.swing.JPanel panelLoad01;
    private javax.swing.JPanel panelLoad02;
    private javax.swing.JPanel panelMsg01;
    private javax.swing.JPanel panelMsg02;
    private javax.swing.JPanel panelNorth;
    private javax.swing.JPanel panelNorthRight;
    private javax.swing.JPanel panelSouth;
    private javax.swing.JTextArea textAreaRelatorio;
    private javax.swing.JTextField textFieldDatabase;
    private javax.swing.JTextField textFieldPassword;
    private javax.swing.JTextField textFieldPort;
    private javax.swing.JTextField textFieldServer;
    private javax.swing.JTextField textFieldUser;
    // End of variables declaration//GEN-END:variables
}
